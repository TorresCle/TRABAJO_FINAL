# Set work directory
setwd("E:/2021/unmsm/2021_1/prograI/sesion08")
# Cargar librerias
library(rgdal)
library(raster)
library(sf)
library(tidyverse)

# Leer datos vectoriales
## rgdal
dep_ogr <- readOGR("data_vector_12/Departamentos.shp")
dep_ogr@data$DEPNOM

## raster | sp:spatial
dep_ras <- shapefile("data_vector_12/Departamentos.shp")

## sf
dep_sf <- st_read("data/Departamentos.shp")
dep_sf$DEPNOM

### ESRI geodatabase
dep_sf <- st_read(dsn="E:/sernanp/data/2021083.gdb", layer="MonitDefor")

### Geopackage
dep_sf <- st_read(dsn="E:/sernanp/proyectos/capacitacion/sigII/capacitacion_sig.gpkg", 
                  layer="gpo_anp_1")

# Entendiendo qué tipo de dato es la geometría de un objeto
a <- c(1,2,3)
b <- c("a", "b", "c")
c <- list(logicos = c(T,T,F),
          letras = c("d", "e", "f"),
          matriz = matrix(1:9,3))

data.frame(a,b,c)
tibble(a,b,c)

# Ploteo
plot(dep_ogr) # Con rgdal
plot(st_geometry(dep_sf))# Con rgdal

dep_ogr@data # Con rgdal
dep_sf %>% st_drop_geometry() # Con rgdal

## RASTER
# Leer datos raster de una sola banda
dem <- raster("data/raster/ASTGTM_S08W079_dem.tif")
plot(dem)
# stars
# ncdf4

# Leer datos raster multibanda
st_l5 <- stack(c("data/raster/LT50090652007213CUB00_B1.TIF",
                 "data/raster/LT50090652007213CUB00_B2.TIF",
                 "data/raster/LT50090652007213CUB00_B3.TIF",
                 "data/raster/LT50090652007213CUB00_B4.TIF"))
# brick()

# Analizando los metadatos de los objetos raster
extent(dem)
res(dem)
crs(dem)
nlayers(st_l5)

# Extraer elementos del metadato
getValues(dem)

# Leer valores de un objeto raster
mean(getValues(dem), na.rm=T)

# Creando mapas rápidos con plot() y plotRGB()
plot(st_l5[[1]])
st_l5_1 <- stack(st_l5[[4]], st_l5[[3]], st_l5[[2]])
plotRGB(st_l5_1)

ndvi <- (st_l5[[4]] - st_l5[[3]])/(st_l5[[4]] + st_l5[[3]])
plot(ndvi)



ter <- read.csv("data/earthquakes.csv") %>% tibble()
# Convertir csv a puntos - st_as_sf()
ter_sf <- st_as_sf(ter, coords = c("Longitude", "Latitude"), crs = st_crs(4326))
plot(st_geometry(ter_sf))

library(mapview)
mapview(ter_sf)

# Crear buffer - st_buffer()
ter_sf_buf <- st_buffer(ter_sf, 1)
ter_sf_buf %>% head(1) %>% mapview()

library(mapedit)
editMap()

# Extraer centroides - st_centroid()

# Crear contorno - st_bbox(), st_make_grid()

# Unir objetos - st_union()

# Unir puntos - st_convex_hull()



# Enmascaramiento de raster - mask() con as(pol, "Spatial")

# Extraccion de datos - extract()

# Algebra de mapas